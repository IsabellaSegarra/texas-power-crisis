---
title: "Investigating the 2021 Texas Power Crisis"
subtitle: "EDS-223 Assignment 3"
author: "Isabella Segarra"
date: 10-19-2025
format: 
  pdf: default 
  html: default
theme: pandoc
execute: 
  warning: false
  message: false
---

# TITLE 

[ADD README SCREENSHOT]
![](filepath)

### Objective
In this project, I investigated....

## Environment Set-up 
```{r}
#| output: false
#| message: false

# Load relevant libraries
library(sf) # For vector data
library(stars) # For raster data
library(terra) # raster handling
library(tmap) # For static and interactive maps
library(here) # For importing data 
library(tidyverse) # For data cleaning
library(dplyr) # For filtering data 
library(paletteer) # For pretty colors 
library(testthat) # For efficient workflows 

```

## Data Import
The data I am using in this project includes data from NASA's Worldview for night light data, data for roads and houses from OpenStreetMap (OSM), and socieconomic data from the U.S. Census Bureau's American Community Survey. 

### Night lights data import
This raster data is from NASA's Worldview tool, distributed through NASA's Level-1 and Atmospheric Archive & Distribution System Distributed Active Archive Center (LAADS DAAC). It is a `.tif` file that contains 10x10 degree tiles. I will be importing four data files from the `VNP46A1` folder for night light data from the days surrounding the storm. 
```{r}

# Import tile h08v05 from 2021-02-07
nl_h08v05_07 <- read_stars(here("data", "VNP46A1","VNP46A1.A2021038.h08v05.001.2021039064328.tif"))

# Import tile h08v06 from 2021-02-07
nl_h08v06_07 <- read_stars(here("data", "VNP46A1","VNP46A1.A2021038.h08v06.001.2021039064329.tif"))

# Import tile h08v05 from 2021-02-16
nl_h08v05_16 <- read_stars(here("data", "VNP46A1","VNP46A1.A2021047.h08v05.001.2021048091106.tif"))

# Import tile h08v06 from 2021-02-16
nl_h08v06_16 <- read_stars(here("data", "VNP46A1","VNP46A1.A2021047.h08v05.001.2021048091106.tif"))

```

### Roads data import
This vector data is from OSM, processed with the help of a third party site (CITE) to produce a shapefile of all Texas highways. This data contains 6,085 observations with 11 variables. 
```{r}
# Import roads data with SQL query to filter for only highways 
roads <- read_sf(here("data", "gis_osm_roads_free_1.gpkg"), query = "SELECT * FROM gis_osm_roads_free_1 WHERE fclass='motorway'")

```

### House data import
This vector data is also from OSM, processed with the helpf of a third party(CITE) to produce a shapefile of houses in the Houseton metropolitan area. This data contains 475941 observations with 6 variables. 
```{r}
# Import house data with SQL query to filter for selected building types
houses <- read_sf(here("data", "gis_osm_buildings_a_free_1.gpkg"), query = "SELECT * FROM gis_osm_buildings_a_free_1 WHERE (type IS NULL AND name IS NULL) OR type in ('residential', 'apartments', 'house', 'static_caravan', 'detached')")

```

## Socieconomic data import
This data is from  U.S. Census Bureauâ€™s American Community Survey (CITE) 2019 census. This Geodatabase (gdb) data contains data for Texas with  5,365 observations and 16 variables.  
```{r}
# Import socioeconomic data REDO!!!
socioeco <- read_sf(here("data", "ACS_2019_5YR_TRACT_48_TEXAS.gdb"), layer = "ACS_2019_5YR_TRACT_48_TEXAS")

```

## Data wranlging

### CRS Matching
In order to work with all datasets, I need to confirm that the Coordinate Refrence Systems (CRS) match. 

```{r}
# ......Check CRS of individual datasets (TURN INTO for loop)......

# Create list of the datasets
datasets <- list(houses, roads, socioeco,nl_h08v05_07, nl_h08v06_07, nl_h08v05_16, nl_h08v06_16)


# Loop through each dataset and print its CRS

for (i in seq_along(datasets)) {
  epsg <- st_crs(datasets[[i]])$epsg
  print(epsg)
  if (epsg != 4326) {
    print ("Coordinate reference systems do NOT match")
  }
}

# MAKE IT PRINT WITH THE NAMES OF THE DATA 

```
Since the CRS of 'socioeco' is inconsisent with the CRSs of the rest of the data, I will transform this data to match the rest of the data. 

```{r}
# ......Transform CRS of 'socioeco' ......

# I only need to use the CRS of one object to convert. Roads is easy to spell.  
socieoeco <- st_transform(socioeco, crs = st_crs(roads))

# Check if CRSs matched
if(st_crs(socieoeco) == st_crs(roads)) {
  print("coordinate reference systems match")
} else{
  print("coordinate reference systems do NOT match")
} 

```
### Check for Invalid geometries
Check for invalid geometries in our three datasets (roads, houses, socieoeco) that contain a geometry type (e.g, multiploygon). 
```{r}
#......Checking for invalid geometries......

# Create a dataset with only the data that contains geometries
datasets_geom = list(roads, houses, socieoeco)

# Check if there are invalid geometries 
for (i in seq_along(datasets_geom)) {
  which(!st_is_valid(datasets_geom[[i]]))
  print("There are NO invalid geometries")
}
```

## Phase 1: Create blackout mask 
In this phase, I will identify places that experienced a blackout by creating a mask. 

### Create raster
```{r}
#......Create raster for 2021-02-07 tiles...... # THIS CAN ALSO BE A FOR LOOP

# Create raster object for tile h08v05
nl_05_07_rast <- rast(nl_h08v05_07)

# Confirm class of object 
class(nl_05_07_rast)

# Create raster object for tile h08v06
nl_06_07_rast <- rast(nl_h08v06_07)

# Confirm class of object
class(nl_06_07_rast)

# Clear up environment for efficiency 
rm(list = c("nl_h08v05_07", "nl_h08v06_07"))

```

```{r}
#......Create raster for 2021-02-16 tiles ......

# Create raster object for tile h08v05
nl_05_16_rast <- rast(nl_h08v05_16)

# Confirm class of object 
class(nl_05_16_rast)

# Create raster object for tile h08v06
nl_06_16_rast <- rast(nl_h08v06_16)

# Confirm class of object
class(nl_06_16_rast)

# Clear up environment for efficiency 
rm(list = c("nl_h08v05_16", "nl_h08v06_16"))

```
### Scale tiles 

### Merge tiles 
```{r}
#......Night light change  ......

nl_07 <- merge(nl_05_07_rast, nl_06_07_rast)

nl_16 <- merge(nl_05_16_rast, nl_06_16_rast)

dif_nl <- nl_07 - nl_16

tm_shape(nl_07) +
  tm_raster()
```

### Update tiles extent
```{r}
if(ext(nl_07) == ext(nl_16)){
  print("extents match")
} else{
  print("extents do not match")
}
```


### Change in night light intensity
